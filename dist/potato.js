// Generated by CoffeeScript 1.10.0
(function() {
  var BSON, bson, fs, glob, nestedObject, packageJson, path, program;

  program = require("commander");

  bson = require("bson");

  path = require("path");

  fs = require("fs");

  glob = require("glob");

  packageJson = require("../package.json");

  BSON = new bson.BSONPure.BSON();

  nestedObject = function(base, elements, value) {
    var name;
    if (elements.length === 0) {
      return base;
    }
    if (base[name = elements[0]] == null) {
      base[name] = {};
    }
    if ((value != null) && elements.length === 1) {
      base[elements[0]] = value;
    }
    base[elements[0]] = nestedObject(base[elements[0]], elements.slice(1, elements.length), value);
    return base;
  };

  program.version(packageJson.version);

  program.command("pack <directories...>").option("--as-json", "Pack as .json file").option("-o, --output <directory>", "Output Directory").action(function(directories, cmd) {
    var absolutePath, content, data, dir, file, files, globOptions, i, j, len, len1, obj, objName, outputFile, outputPath, packAsJson, parts, results;
    results = [];
    for (i = 0, len = directories.length; i < len; i++) {
      dir = directories[i];
      absolutePath = path.resolve(__dirname, dir);
      if (!fs.existsSync(absolutePath)) {
        console.log("Can't find a directory called \"" + dir + ".\". (Absolute Path: " + absolutePath + ")");
        continue;
      }
      if (!fs.lstatSync(absolutePath).isDirectory()) {
        console.log(dir + " is not a directory, can't make a potato out of it.");
        continue;
      }
      console.log("Trying to pack: " + absolutePath);
      obj = {};
      objName = path.basename(dir);
      outputPath = cmd.output != null ? cmd.output : ".";
      packAsJson = cmd.asJson != null;
      globOptions = {
        cwd: path.resolve(absolutePath),
        matchBase: true
      };
      files = glob.sync("*.json", globOptions);
      console.log("\tfound " + files.length + " files...");
      for (j = 0, len1 = files.length; j < len1; j++) {
        file = files[j];
        console.log("\tpacking " + (path.resolve(dir, file)) + "...");
        parts = file.split("/").slice(0, file.split("/").length - 1);
        content = JSON.parse(fs.readFileSync(path.resolve(absolutePath, file)));
        if (parts.length === 0) {
          obj = nestedObject(obj, [path.basename(file, ".json")], content);
        } else {
          obj = nestedObject(obj, parts.concat(path.basename(file, ".json")), content);
        }
      }
      outputFile = path.resolve(__dirname, outputPath, packAsJson ? objName + ".json" : objName + ".potato");
      data = null;
      if (packAsJson) {
        data = JSON.stringify(obj, null, "    ");
      } else {
        data = BSON.serialize(obj, false, true, false);
      }
      results.push(fs.writeFile(outputFile, data, function(err) {
        if (err != null) {
          console.error("ERROR: Could not write file " + outputFile + "\n" + err);
          return;
        }
        return console.log("DONE. You can find the packed resource at " + outputFile);
      }));
    }
    return results;
  });

  program.parse(process.argv);

}).call(this);
